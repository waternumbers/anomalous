// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// opc
Rcpp::List opc(std::vector<double>& x, std::vector<double>& mu, std::vector<double>& sigma, double& beta, double& minLen, double& maxLen);
RcppExport SEXP _anomalous_opc(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP betaSEXP, SEXP minLenSEXP, SEXP maxLenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type minLen(minLenSEXP);
    Rcpp::traits::input_parameter< double& >::type maxLen(maxLenSEXP);
    rcpp_result_gen = Rcpp::wrap(opc(x, mu, sigma, beta, minLen, maxLen));
    return rcpp_result_gen;
END_RCPP
}
// peltc
Rcpp::List peltc(std::vector<double>& x, std::vector<double>& mu, std::vector<double>& sigma, double& beta, double& minLen, double& maxLen);
RcppExport SEXP _anomalous_peltc(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP betaSEXP, SEXP minLenSEXP, SEXP maxLenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double& >::type minLen(minLenSEXP);
    Rcpp::traits::input_parameter< double& >::type maxLen(maxLenSEXP);
    rcpp_result_gen = Rcpp::wrap(peltc(x, mu, sigma, beta, minLen, maxLen));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_segments();

static const R_CallMethodDef CallEntries[] = {
    {"_anomalous_opc", (DL_FUNC) &_anomalous_opc, 6},
    {"_anomalous_peltc", (DL_FUNC) &_anomalous_peltc, 6},
    {"_rcpp_module_boot_segments", (DL_FUNC) &_rcpp_module_boot_segments, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_anomalous(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
